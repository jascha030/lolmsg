#!/usr/bin/env zsh

emulate -L zsh

# TODO: Options
# TODO: Curses

# This is a map of all character widths for the "roman" figlet font.
typeset -A characterset_cols=(
    ["a"]=9 ["A"]=15 ["b"]=10 ["B"]=12 ["c"]=9 ["C"]=11 ["d"]=10 ["D"]=13 ["e"]=9 ["E"]=12 ["f"]=8 ["F"]=12 ["g"]=10
    ["G"]=13 ["h"]=11 ["H"]=13 ["i"]=5 ["I"]=5 ["j"]=8 ["J"]=7 ["k"]=11 ["K"]=12 ["l"]=5 ["L"]=12 ["m"]=17 ["M"]=16
    ["n"]=11 ["N"]=14 ["o"]=9 ["O"]=12 ["p"]=10 ["P"]=12 ["q"]=10 ["Q"]=15 ["r"]=8 ["R"]=12 ["s"]=8 ["S"]=11 ["t"]=7
    ["T"]=13 ["u"]=11 ["U"]=13 ["v"]=11 ["V"]=15 ["w"]=16 ["W"]=24 ["x"]=11 ["X"]=14 ["y"]=11 ["Y"]=13 ["z"]=10
    ["Z"]=13 ["1"]=5 ["2"]=10 ["3"]=10 ["4"]=10 ["5"]=10 ["6"]=10 ["7"]=10 ["8"]=10 ["9"]=10 ["0"]=10 [" "]=3
)

local msg=$1 \
    lol_anmial="lcat"            \
    t_center=0                   \
    char_height=7                \
    line_margin=2                \
    ph=6                         \
    tl_center=0

local row_height=$((${char_height}+${line_margin}))

if (( ${+LOL_MSG_PROMPT_HEIGHT} )); then
    ph=$(( ${LOL_MSG_PROMPT_HEIGHT} ))
fi

ph=$2

#---------------------------------------------------------------------------------------------------------------------#


# Calc. output msg width.

function __pad_lines {
    printf '\n%.0s' {1.."$1"}
}

# Print figlet, style depends on term being normal/vim-term.
function __output_fig {
    local curses

    [[ $# == 1 ]] && curses=0 || curses=1

    local _output=$(figlet -Lcw $t_cols -f roman $1)
    local _current_scheme="$(is_dark)"

    [[ "$_current_scheme" == 0 ]] && local _grad="warm" || local _grad="rainbow"

    if [[ "$_IS_VIMTERM" == false && ${curses} == 0 ]]; then
        echoti blink
    fi

    print "$_output" | lolcrab -g "$_grad"
}


# Print padding + figlet output.
function __lolmsg_output {
    __pad_lines  "$1"
    __output_fig "$2"
    __pad_lines  "$3"
}


function __print_lolmsg_output {
    # Calc. term dimmensions & figlet output width in cols.
    local -i t_cols=${COLUMNS}
    local -i t_lines=${LINES}
    local -i tl_center=$((${t_lines}/2))

    # Calculate msg size
    local _str_cols=0 i c
    for (( i=0; i<${#msg}; i++ )); do
        _str_cols=$(( ${_str_cols} + ${characterset_cols[${msg:$i:1}]} ))
    done

    local msg_cols=${_str_cols}

    # Calc. #times term width fits in output width, tells us the amt. of rows that figlet outputs.
    local -i required_rows=$(( (${msg_cols}/${t_cols})+( (${msg_cols}%${t_cols}) > 0 ) ))

    # Calc. output + center in lines, tells us where to start figlet output.
    local -i required_lines=$((${required_rows}*${row_height}))
    local -i ol_center=$((${required_lines}/2))
    local -i start_output_at=$((${tl_center}-${ol_center}))

    __lolmsg_output "${start_output_at}" "${msg}" 1

    if [[ $# == 1 ]]; then
        # Get position after figlet output.
        local -i occupied_lines=$((${start_output_at}+${required_lines}))
        local -i extra_text_pos=$((${occupied_lines}+3))
        local -i render_pos=$(( (${t_cols}/2) - ( ${#1} / 2) ))

        echoti cup $extra_text_pos $render_pos; print "$1"
    fi
}

# (Experimental/W.I.P.) NCurses version.
function __open_curses_intro {
    zmodload zsh/curses && {
        local i

        zcurses init
        zcurses refresh

        echoti civis

        zcurses clear stdscr redraw
        zcurses refresh stdscr

        zcurses addwin intro ${t_lines} ${t_cols} 0 0
        zcurses scroll intro off
        zcurses attr intro blink

        zcurses string intro "$(__print_lolmsg_output $'[ Press any key ]')"
        zcurses refresh intro stdscr

        zcurses timeout intro 0

        until [[ $i == [\ ] ]]; do
            zcurses input intro i
        done
        } always {
        zcurses delwin intro
        echoti cnorm
        zcurses end
    }
}


# "press any key" variant.
function __with_i_msg {
    __print_lolmsg_output $'[ Press any key ]'
}


function __exit_intro {
    echoti rmcup
    echoti cup $(( (${t_lines}-${ph}) + 2 )) 0
    echoti cnorm
}

function __open_intro_screen {
    echoti civis
    echoti smcup
    __with_i_msg
    read -k1 -s
    __exit_intro
}


#---------------------------------------------------------------------------------------------------------------------#

# Run the output.
function __run {
    local curses

    [[ $# == 0 ]] && curses=0 || curses="$1"

    if [[ "$curses" == "curses" ]]; then
        __open_curses_intro
    else
        __open_intro_screen
    fi
}

__run
